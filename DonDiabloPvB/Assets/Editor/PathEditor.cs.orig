using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

namespace SplineEditor
{
    [CustomEditor(typeof(PathCreator))]
    public class PathEditor : Editor {

        PathCreator creator;
        Path path;

        private void OnSceneGUI()
        {
<<<<<<< HEAD
=======
            base.OnInspectorGUI();

            EditorGUI.BeginChangeCheck();

            if (GUILayout.Button("Create New")){
                Undo.RecordObject(creator, "Create new");
                creator.CreatePath();
            }

            bool isClosed = GUILayout.Toggle(Path.IsClosed, "Closed");

            if (isClosed != Path.IsClosed){
                Undo.RecordObject(creator, "Toggle closed");
                Path.IsClosed = isClosed;
            }

            bool autoSetControlPoints = GUILayout.Toggle(Path.AutoSetControlPoints, "Auto set control points");
            if(autoSetControlPoints != Path.AutoSetControlPoints){
                Undo.RecordObject(creator, "Toggle Auto set controls");
                Path.AutoSetControlPoints = autoSetControlPoints;
            }

            if (EditorGUI.EndChangeCheck()){
                SceneView.RepaintAll();
            }
        }

        private void OnSceneGUI(){
>>>>>>> LevelTrack
            Draw();
            PathInput();
        }

        void PathInput()
        {
            Event guiEvent = Event.current;
            Vector2 mousePos = HandleUtility.GUIPointToWorldRay(guiEvent.mousePosition).origin;
            //Vector3 mouseDir = HandleUtility.GUIPointToWorldRay(guiEvent.mousePosition).direction;
            //Vector3 mousePos = Input.mousePosition;

            if (guiEvent.type == EventType.MouseDown && guiEvent.button == 0 && guiEvent.shift)
            {
                /*
                Ray ray = HandleUtility.GUIPointToWorldRay(guiEvent.mousePosition);
                //Ray ray = HandleUtility.GUIPointToWorldRay(mousePos);
                RaycastHit hit;

                if(Physics.Raycast(ray, out hit, 10)){
                    Debug.Log("JA " + mouseDir);
                    Undo.RecordObject(creator, "Add Segment");
                    path.AddSegment(hit.point);
                }else{
                    Debug.Log("nothing hit");
                    Undo.RecordObject(creator, "Add Segment");
                    //mousePos.z += (Camera.current.transform.position.z * mouseDir.z);
                    path.AddSegment(Camera.current.ScreenToWorldPoint(mousePos));
                }
                */
            
                Undo.RecordObject(creator, "Add Segment");
                path.AddSegment(mousePos);
            
            }
        }

        void Draw(){

            for (int i = 0; i < path.NumSegments; i++){
                Vector2[] points = path.GetPointsInSegment(i);
                Handles.color = Color.black;
                Handles.DrawLine(points[1], points[0]);
                Handles.DrawLine(points[2], points[3]);
                Handles.DrawBezier(points[0], points[3], points[1], points[2], Color.green, null, 2);
            }

            Handles.color = Color.red;
            for (int i = 0; i < path.NumPoints; i++){
                Vector2 newPos = Handles.FreeMoveHandle(path[i], Quaternion.identity, .1f, Vector2.zero, Handles.CylinderHandleCap);
                if(path[i] != newPos){
                    Undo.RecordObject(creator, "Move Point");
                    path.MovePoint(i, newPos);
                }
            }
        }

        private void OnEnable(){
            creator = (PathCreator)target;
            if(creator.path == null){
                creator.CreatePath();
            }
<<<<<<< HEAD
            path = creator.path;
=======
>>>>>>> LevelTrack
        }
    }
}
